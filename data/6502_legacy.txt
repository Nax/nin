# This is the legacy decoder

00400000004000000050000000400000222222220050000022222222000000000 reg_src_a
00000000000000000000000000000000044404400000000000400000111100000 reg_src_x
00000000000000000000000000000000011101100000000011111000000000000 reg_src_y
00000000000000000000000000000000000000000000004000000000000000000 reg_src_s
22622222226222222262222222722222004400102222222200000000222222220 reg_dst_a
00000000000000000000000000000000000000004444044400400000001000000 reg_dst_x
00000000000000000000000000000000001000001111010100100000000000000 reg_dst_y
00000000000000000000000000000000000000600000000000000000000000000 reg_dst_s
20000606200006062000060620000606200003022000030320000606200006060 addr_index_x
00000020000000200000002000000020000004200000042400000020000000200 addr_index_y
26263626372736262627362626273626270737227727372737273626372736260 addr_op1
00060026100700260007002600070026000700220007002700070026000700260 addr_op2
20000600200006002000060020000600200007002000070020000600200006000 addr_zero
00000026000000260000002600000026000000220000002700000026000000260 addr_abs_index
20002000200020002000200020012000200020002000200020002000200020000 addr_indirect
00002000000020000000200000002000000020000000200000002000000020000") { addr += state->cpu.regs[REG_Y]; }                                   /* post-index */
00000000000000000000000000000000000000000000000000000000000000000") { CYCLE(); }                                                          /* post-X */
00000004000000040000000400000004000020220000000000000004000000040") { CYCLE(); }                                                          /* phantom read */
26062626270726262606262626062626000000002707272727072626270726260") { READ(addr); CYCLE(); }                                              /* mem */
04040404040404040404040404040404000000000000000004040404040404040") { ninMemoryWrite8(state, addr, tmp); CYCLE(); }                       /* RMW phantom writes */
00400000004000000050000000400000277727720050004000500000001000000") { tmp = state->cpu.regs[r0]; }                                        /* reg -> tmp */
00100000000000000000000000000000000000000000000000000000000000000") { tmp = (state->cpu.p | ~PFLAG_MASK); }                               /* flags -> tmp */
22222222000000000000000000000000000000000000000000000000000000000") { tmp = state->cpu.regs[REG_A] | tmp; }                               /* ora */
00000000222222220000000000000000000000000000000000000000000000000") { tmp = state->cpu.regs[REG_A] & tmp; }                               /* and */
00000000000000002222222200000000000000000000000000000000000000000") { tmp = state->cpu.regs[REG_A] ^ tmp; }                               /* eor */
00000000000000000000000022222222000000000000000000000000000000000") { tmp = _adc(state, state->cpu.regs[REG_A], tmp); }                   /* adc */
00000000000000000000000000000000000000000000000000000000222222220") { tmp = _adc(state, state->cpu.regs[REG_A], ~tmp); }                  /* sbc */
00000000000000000000000000000000000000000000000000100000041404040") { tmp++; }                                                            /* inc */
00000000000000000000000000000000001000000000000004440404000000000") { tmp--; }                                                            /* dec */
04440404000000000000000000000000000000000000000000000000000000000") { tmp = asl(state, tmp); }                                            /* asl */
00000000044404040000000000000000000000000000000000000000000000000") { tmp = rol(state, tmp); }                                            /* rol */
00000000000000000444040400000000000000000000000000000000000000000") { tmp = lsr(state, tmp); }                                            /* lsr */
00000000000000000000000004440404000000000000000000000000000000000") { tmp = ror(state, tmp); }                                            /* ror */
00000000010100000000000000000000000000000000000000000000000000000") { tmp = bit(state, tmp); }                                            /* bit */
00100000000000000010000000000000000000000000000000000000000000000") { PUSH8(tmp); }                                                       /* push */
00000000001000000000000000100000000000000000000000000000000000000") { POP8(); CYCLE(); }                                                  /* pop */
04040404040404040404040404040404270727220000000004040404040404040") { ninMemoryWrite8(state, addr, tmp); CYCLE(); }                       /* store */
22622222226222222262222222722222005000507777276700500000223222220") { state->cpu.regs[r1] = tmp; }                                        /* load */
00000000001000000000000000000000000000000000000000000000000000000") { state->cpu.p = (tmp & PFLAG_MASK); }                                /* tmp -> flags */
00000000000000000000000000000000000000000000000033232222110100000") { tmp = compare(state, state->cpu.regs[r0], tmp); }                   /* cmp */
26662667276726662666266626760426007040107777276777772626373726260") { flagZ(state, tmp); }                                                /* Z */
26662667266626662666266626760426007040107777276777772626373726260") { flagN(state, tmp); }                                                /* N */
00000000000000001000000000000000000000000000000000000000000000000") { POP8(); state->cpu.p = (tmp & PFLAG_MASK); POP16(); state->cpu.p2 = state->cpu.p; state->cpu.pc = addr; CYCLE(); } /* rti */
00000000000000000000000010000000000000000000000000000000000000000") { POP16(); state->cpu.pc = addr + 1; CYCLE(); CYCLE(); } /* rts */
00000000100000000000000000000000000000000000000000000000000000000") { PUSH16(state->cpu.pc - 1); CYCLE(); } /* jsr */
00000000100000000001000000010000000000000000000000000000000000000") { state->cpu.pc = addr; } /* jmp */
00001000000000000000100000000000000010000000000000001000000000000") { if (!(state->cpu.p & kBranchFlags[N >> 6])) { CYCLE(); ECYCLE(state->cpu.pc, ((int8_t)tmp)); state->cpu.pc += (int8_t)tmp; } } /* branch-clear */
00000000000010000000000000001000000000000000100000000000000010000") { if ((state->cpu.p & kBranchFlags[N >> 6])) { CYCLE(); ECYCLE(state->cpu.pc, ((int8_t)tmp)); state->cpu.pc += (int8_t)tmp; } } /* branch-set */
10000000000000000000000000000000000000000000000000000000000000000") { state->cpu.p |= PFLAG_B; state->cpu.pc++; } /* BRK */
10000000000000000000000000000000000000000000000000000000000000001") { addr = 0xfffe; } /* Vector: IRQ */
00000000000000000000000000000000000000000000000000000000000000002") { addr = 0xfffa; } /* Vector: NMI */
10000000000000000000000000000000000000000000000000000000000000003") { PUSH16(state->cpu.pc); PUSH8(state->cpu.p | PFLAG_1); state->cpu.p &= ~(PFLAG_B); CYCLE(); CYCLE(); state->cpu.p |= PFLAG_I; state->cpu.pc = ninMemoryRead16(state, addr); } /* brk */
